- name: Install required packages
  ansible.builtin.dnf:
    name: "{{ item }}"
    state: present
  loop:
    - gpgme
    - curl
    - procps-ng
    - net-tools
    - gnupg2


- name: Import Elasticsearch GPG Key
  ansible.builtin.shell: "rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch"

- name: Add Elasticsearch YUM Repository using blockinfile
  ansible.builtin.blockinfile:
    path: /etc/yum.repos.d/elasticsearch.repo
    block: |
      [elasticsearch]
      name=Elasticsearch repository for 8.x packages
      baseurl=https://artifacts.elastic.co/packages/8.x/yum
      gpgcheck=1
      gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch
      enabled=0
      autorefresh=1
      type=rpm-md
    create: yes
    owner: root
    group: root
    mode: '0644'

- name: Install Elasticsearch package with enabled repository
  ansible.builtin.yum:
    name: elasticsearch
    enablerepo: elasticsearch
    state: present

- name: Update Elasticsearch Configuration File
  lineinfile:
    path: /etc/elasticsearch/elasticsearch.yml
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
    - { regexp: '^network\.host:', line: 'network.host: {{ ansible_host }}' } 
    - { regexp: '^http\.port:', line: 'http.port: 9200' }
    - { regexp: '^cluster\.name:', line: 'cluster.name: {{ elk_cluster_name }}' }
    - { regexp: '^node\.name:', line: 'node.name: {{ node_name }}' }
    - { regexp: '^cluster\.initial_master_nodes:', line: 'cluster.initial_master_nodes: {{ initial_master_node }}' } 
    - { regexp: '^path\.data:', line: 'path.data: {{ elasticsearch_path }}' }

- name: Create data directory
  file:
    path: "{{ elasticsearch_path }}"
    state: directory
    mode: '0755'
    recurse: yes
    owner: elasticsearch
    group: elasticsearch
    
- name: Enable and start Elasticsearch service
  service:
    name: elasticsearch
    state: started
    enabled: yes

- name: Run Elasticsearch Reset Password Command
  command: /usr/share/elasticsearch/bin/elasticsearch-reset-password auto -u elastic
  args:
    stdin: "y\n"
  register: reset_password_output

- name: Set elastic password as fact
  set_fact:
    elastic_password: "{{ reset_password_output.stdout | regex_search('New value: (\\S+)', '\\1') | first }}"

- name: Display ELK password
  debug:
    msg: "{{ elastic_password }}"

- name: Use curl to test Elasticsearch connection
  command: >
    curl --cacert /etc/elasticsearch/certs/http_ca.crt -u elastic:{{ elastic_password }} https://localhost:9200
  register: curl_response

- name: Display curl response
  debug:
    msg: "{{ curl_response.stdout }}"

- name: Run elasticsearch-create-enrollment-token to Node
  command: /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s node
  register: enrollment_token_output

- name: Run elasticsearch-create-enrollment-token to Kibana
  command: /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s kibana
  register: kibana_enrollment_token_output

- name: Save the enrollment token as a global fact
  set_fact:
      enrollment_token: "{{ enrollment_token_output.stdout }}"
      elastic_password: "{{ elastic_password }}"
      kibana_enrollment_token: "{{ kibana_enrollment_token_output.stdout }}"
